/*
 * init_axis_parms_state_machine.h
 *
 *  Created on: Jan 9, 2015
 *      Author: abamberger
 */

#ifndef INIT_AXIS_PARMS_STATE_MACHINE_H_
#define INIT_AXIS_PARMS_STATE_MACHINE_H_

#include "PeripheralHeaderIncludes.h"
#include "PM_Sensorless.h"
#include "hardware/HWSpecific.h"

#define ALL_INIT_PARAMS_RECVD_1 0x0FFF
#define ALL_INIT_PARAMS_RECVD_2 0x003F
#define ALL_INIT_PARAMS_RECVD_3 0x7FFF
#define ALL_EL_RATE_PID_INIT_PARAMS_RECVD 0x000F
#define ALL_AZ_RATE_PID_INIT_PARAMS_RECVD 0x00F0
#define ALL_ROLL_RATE_PID_INIT_PARAMS_RECVD 0x0F00
#define ALL_EL_POS_PID_INIT_PARAMS_RECVD 0x000F
#define ALL_AZ_POS_PID_INIT_PARAMS_RECVD 0x00F0
#define ALL_RL_POS_PID_INIT_PARAMS_RECVD 0x0F00
#define ALL_GYRO_OFFSET_INIT_PARAMS_RECVD 0x7000

typedef enum {
    INIT_PARAM_RATE_PID_EL_P_RECVD = 0x0001,
    INIT_PARAM_RATE_PID_EL_I_RECVD = 0x0002,
    INIT_PARAM_RATE_PID_EL_D_RECVD = 0x0004,
    INIT_PARAM_RATE_PID_EL_WINDUP_RECVD = 0x0008,
    INIT_PARAM_RATE_PID_AZ_P_RECVD = 0x0010,
    INIT_PARAM_RATE_PID_AZ_I_RECVD = 0x0020,
    INIT_PARAM_RATE_PID_AZ_D_RECVD = 0x0040,
    INIT_PARAM_RATE_PID_AZ_WINDUP_RECVD = 0x0080,
    INIT_PARAM_RATE_PID_RL_P_RECVD = 0x0100,
    INIT_PARAM_RATE_PID_RL_I_RECVD = 0x0200,
    INIT_PARAM_RATE_PID_RL_D_RECVD = 0x0400,
    INIT_PARAM_RATE_PID_RL_WINDUP_RECVD = 0x0800
} InitParamRecvdFlags1;

typedef enum {
    INIT_PARAM_COMMUTATION_CALIBRATION_SLOPE_RECVD = 0x0001,
    INIT_PARAM_COMMUTATION_CALIBRATION_INTERCEPT_RECVD = 0x0002,
    INIT_PARAM_COMMUTATION_CALIBRATION_HOME_OFFSET_RECVD = 0x0004,
    INIT_PARAM_TORQUE_PID_KP_RECVD = 0x0008,
    INIT_PARAM_TORQUE_PID_KI_RECVD = 0x0010,
    INIT_PARAM_TORQUE_PID_KD_RECVD = 0x0020
} InitParamRecvdFlags2;

typedef enum {
    INIT_PARAM_POS_PID_EL_P_RECVD = 0x0001,
    INIT_PARAM_POS_PID_EL_I_RECVD = 0x0002,
    INIT_PARAM_POS_PID_EL_D_RECVD = 0x0004,
    INIT_PARAM_POS_PID_EL_WINDUP_RECVD = 0x0008,
    INIT_PARAM_POS_PID_AZ_P_RECVD = 0x0010,
    INIT_PARAM_POS_PID_AZ_I_RECVD = 0x0020,
    INIT_PARAM_POS_PID_AZ_D_RECVD = 0x0040,
    INIT_PARAM_POS_PID_AZ_WINDUP_RECVD = 0x0080,
    INIT_PARAM_POS_PID_RL_P_RECVD = 0x0100,
    INIT_PARAM_POS_PID_RL_I_RECVD = 0x0200,
    INIT_PARAM_POS_PID_RL_D_RECVD = 0x0400,
    INIT_PARAM_POS_PID_RL_WINDUP_RECVD = 0x0800,
    INIT_PARAM_GYRO_OFFSET_EL_RECVD = 0x1000,
    INIT_PARAM_GYRO_OFFSET_AZ_RECVD = 0x2000,
    INIT_PARAM_GYRO_OFFSET_RL_RECVD = 0x4000
} InitParamRecvdFlags3;

typedef enum {
    LOAD_AXIS_PARMS_STATE_REQUEST_TORQUE_KP,
    LOAD_AXIS_PARMS_STATE_REQUEST_TORQUE_KI,
    LOAD_AXIS_PARMS_STATE_REQUEST_TORQUE_KD,
    LOAD_AXIS_PARMS_STATE_REQUEST_COMMUTATION_CALIBRATION_SLOPE,
    LOAD_AXIS_PARMS_STATE_REQUEST_COMMUTATION_CALIBRATION_INTERCEPT,
    LOAD_AXIS_PARMS_STATE_REQUEST_COMMUTATION_CALIBRATION_HOME_OFFSET,
    LOAD_AXIS_PARMS_STATE_REQUEST_RATE_PID_EL,
    LOAD_AXIS_PARMS_STATE_REQUEST_RATE_PID_AZ,
    LOAD_AXIS_PARMS_STATE_REQUEST_RATE_PID_ROLL,
    LOAD_AXIS_PARMS_STATE_REQUEST_POS_PID_EL,
    LOAD_AXIS_PARMS_STATE_REQUEST_POS_PID_AZ,
    LOAD_AXIS_PARMS_STATE_REQUEST_POS_PID_RL,
    LOAD_AXIS_PARMS_STATE_REQUEST_GYRO_OFFSETS
} InitAxisParmsState;

typedef struct {
    InitAxisParmsState load_axis_parms_state;
    Uint16 init_param_recvd_flags_1;
    Uint16 init_param_recvd_flags_2;
    Uint16 init_param_recvd_flags_3;
    Uint16 axis_parms_load_complete;
} LoadAxisParmsStateInfo;

void LoadAxisParmsStateMachine(LoadAxisParmsStateInfo* init_parms_state_info);

#endif /* INIT_AXIS_PARMS_STATE_MACHINE_H_ */
